
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is automatically generated in "Generate Kalman Filter C Code.ipynb" from https://github.com/tudelft/kalman_filter   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef EKF_CALC_H
#define EKF_CALC_H

#include <stdint.h>

#define N_STATES 15
#define N_INPUTS 6
#define N_MEASUREMENTS 6

// set to 1 to use phi, theta, psi measurements
float ekf_use_phi;
float ekf_use_theta;
float ekf_use_psi;

// getters
float* ekf_get_X();     // get state vector
float* ekf_get_P();     // get covariance matrix (lower diagonal)

#define ekf_P_index(i,j) ((i>=j) ? ekf_get_P()[i*(i+1)/2+j] : ekf_get_P()[j*(j+1)/2+i])
#define ekf_X_index(i) ekf_get_X()[i]

// setters
void ekf_set_Q(float Q[N_INPUTS]);             // set process noise covariance matrix diagonal
void ekf_set_R(float R[N_MEASUREMENTS]);       // set measurement noise covariance matrix diagonal
void ekf_set_X(float X0[N_STATES]);            // set state vector
void ekf_set_P_diag(float P_diag[N_STATES]);   // set covariance matrix diagonal

// prediction and update functions
void ekf_predict(float U[N_INPUTS], float dt);
void ekf_update(float Z[N_MEASUREMENTS]);

#endif // EKF_CALC_H
